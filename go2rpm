#!/usr/bin/env ruby

require 'rubygems'
require 'nokogiri'
require 'open-uri'
require_relative 'opts.rb'
require_relative 'git.rb'

def getsummary(url="")

	if url.index("github")

		doc = Nokogiri::HTML(open(url))
	
		content = doc.css("div.wrapper div.site div.container div.repo-container div.repository-content div.repository-meta div.repository-description").text

		# remove "\n" and contents in [] block
		summary = content.gsub(/\[.*\]/,'').strip!

	elsif url.index('code.google.com')

		raise "currently not supported"

	else

		raise "currently we only support github"

	end

	return summary

end

def getsource(url="",forcegit=false)

	if url.index("github")

		doc = Nokogiri::HTML(open(url + "/releases"))

		rel = doc.css("div.wrapper div.site div.container div.repo-container div.repository-content").at_css("div.release-timeline")

		version = ""

		source = ""

		# if has releases, download tarball and get tarball url
		# if not, use git
		if rel then

			version = doc.css("div.wrapper div.site div.container div.repo-container div.repository-content div.release-timeline div.label-latest div.release-meta ul.tag-references span.css-truncate-target").text

			unless forcegit then
				# url = https://github.com/marguerite/golang-packaging to get https://github.com
				prefix = url.gsub(/\/.*$/,'') + "//" + url.gsub(/^(https:\/\/|http:\/\/)/,'').gsub(/\/.*$/,'')

				source = prefix + doc.css("div.wrapper div.site div.container div.repo-container div.repository-content div.release-timeline div.label-latest div.release-body ul.release-downloads li:nth-child(2) a")[0]["href"]

				source = convert(source)

				download(source)

			else

				s = Git.new(url,true,version).git

				version = s[0]

				source = s[1]

			end

		else

			s = Git.new(url).git

			version = s[0]

			source = s[1]

		end

	elsif url.index("code.google.com")

	else

		raise "We currently only supports github and googlecode. maybe -p to specify its importpath and -u for its github/googlecode url?"

	end

	return version, source

end

def convert(url="")

	# convert https://github.com/marguerite/golang-packaging/archive/8.tar.gz to archive/8/name-8.tar.gz
	if url.index("github") then

		toreplace = url.gsub(/^.*archive\//,'')	# 8.0.0.tar.gz

		version = toreplace.gsub(/\.tar.*$/,'') # 8.0.0

		suffix = toreplace.gsub(version,'') # .tar.gz

		name = url.gsub(/\/archive.*$/,'').gsub(/^(https:\/\/|http:\/\/)/,'').split("/")[2] # golang-packaging
		replace = "#{version}/#{name}-#{version}#{suffix}"

		newurl = url.gsub(/\/archive.*$/,'') + "/archive/" + replace

		return newurl

	else

		return url	

	end

end

def download(url="")

	system "wget #{url}"

end

def fcopy(dest="", orig="./template.spec.in")

	system "cp -r #{orig} #{dest}"		

end

def createprj(pkgname="")

	system "mkdir #{pkgname}"

end

def fill(file="", name="",version="",summary="",url="",source="")

	open("#{file}.new",'w') do |f1|

		open(file,'r') do |f2|

			f2.each_line do |l|

				if l.index('@NAME@') then

					f1 << l.gsub('@NAME@',name)

					next

				end

				if l.index('@VERSION') then

					f1 << l.gsub('@VERSION@',version)

					next

				end

				if l.index('@SUMMARY@') then

					f1 << l.gsub('@SUMMARY@',summary)

					next

				end

				if l.index('@URL@') then

					f1 << l.gsub('@URL@',url)

					next

				end

				if l.index('@SOURCE@') then

					f1 << l.gsub('@SOURCE@',source)

					next

				end

				f1 << l

			end

		end

	end

	FileUtils.mv("#{file}.new",file)

end

def init()

	opts = Opts.new

	url = opts[:url]

	importpath = opts[:importpath]

	pkgname = opts[:pkgname]

	version = opts[:version]

	source = opts[:source]

	fg = opts[:forcegit]

	# Summary

	summary = getsummary(url)

	# Source

	# avoid download twice

	if fg then 

		vs = getsource(url,true)

	else

		vs = getsource(url,false)	

	end

	version = vs[0]

	source = vs[1]

	# process

	createprj(pkgname)

	fcopy("#{pkgname}/#{pkgname}.spec")

	system "mv *.xz #{pkgname}/"

	fill("#{pkgname}/#{pkgname}.spec",pkgname,version,summary,url,source)

end

init()
